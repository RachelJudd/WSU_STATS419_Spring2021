# https://raw.githubusercontent.com/MonteShaffer/humanVerse/main/humanVerse/R/functions-dataframe.R
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-dataframe.R");
#library(devtools);
#source_url(include.me);
source(include.me); # subsetDataFrame
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-str.R");
source(include.me); # trimMe
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-vector.R");
source(include.me); # findAllIndexesWithValueInVector
include.me = paste0(github.monte, "humanVerse/main/misc/functions-integrate2.R");
source(include.me); # parseNumericalFunctionString
# https://brand.wsu.edu/visual/colors/
wsu.crimson = "#981e32";
wsu.gray    = "#717171";
fstr = "f(x): 2 * x + 3       >     x.domain = c(-5,5);  ";
finfo = computeNumericalIntegrationString(fstr, start=-4, stop=4, showPolygons = TRUE, verbose=TRUE);
names(finfo);
str(finfo$result);
cat("\n", "===============", "\n\n");
finfo$result$total;
fstr = "f(x): 2 * x + 3       >     x.domain = c(-5,5);  ";
finfo = computeNumericalIntegrationString(fstr, start=-4, stop=4, showPolygons = TRUE, verbose=TRUE, dxi=0.1);
cat("\n", "===============", "\n\n");
finfo$result$total;
fstr = "Normal: -5 , 5 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -4 , 4  ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -3 , 3 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -2 , 2 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -1 , 1 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -1 , 1     >     x.domain = c(-5,5);   ";  # notice it overrides the value to the left ...
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
fstr = "Normal: -1 , 1     >     x.domain = c(-4,4);   ";  # notice it overrides the value to the left ...
finfo = computeNumericalIntegrationString(fstr, start=-1, stop=1, verbose=FALSE);
cat("\n", "MAXIMUM: ", max(finfo$result$info$y), "\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
z = 0;
fstr = "Normal: -4 , 4 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE, stop=z);
cat("\n", "===============", "\n\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
cat("\n", "pnorm(", z, "): ", pnorm(z), "\n");
z = 1;
fstr = "Normal: -4 , 4 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE, stop=z);
cat("\n", "===============", "\n\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
cat("\n", "pnorm(", z, "): ", pnorm(z), "\n");
z = -1;
fstr = "Normal: -4 , 4 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE, stop=z);
cat("\n", "===============", "\n\n");
cat("\n", "AREA: ", finfo$result$total, "\n");
cat("\n", "pnorm(", z, "): ", pnorm(z), "\n");
z = 2;
(z.pnorm = pnorm(z));
cat("\n", "===============", "\n\n");
(qnorm.z.pnorm = qnorm(z.pnorm));
cat("\n", "===============", "\n\n");
qnorm(pnorm(z));
library(pracma);
( x = pracma::primes(135) );
cat("\n", "===============", "\n\n");
( nx = length(x) );
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-standardize.R");
source(include.me);
x;
cat("\n", "===============", "\n\n");
standardizeToMin(x);
x;
cat("\n", "===============", "\n\n");
standardizeToMin(x, myMin=1/3);  # if the "true min" is not found in the data ...
x;
cat("\n", "===============", "\n\n");
standardizeToMax(x);
cat("\n", "===============", "\n\n");
100 * standardizeToMax(x);
x;
cat("\n", "===============", "\n\n");
standardizeToMax(x, myMax=1000);  # if the "true max" is not found in the data ...
x;
cat("\n", "===============", "\n\n");
standardizeToFactor(x, factor=1000);
standardizeToN(x); # maybe should be standarizeToLength(x) ... add as "alias"
# standardizeToFactor(x, factor=nx);
x;
cat("\n", "===============", "\n\n");
x.sum = standardizeToSum(x);
x.sum;
cat("\n", "===============", "\n\n");
sum(x.sum);  # these values sum to one
x;
cat("\n", "===============", "\n\n");
oldrange = range(x);  newrange = c(1,100);
standardizeFromOldRangeToNew(x, oldrange, newrange);
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-stats.R");
source(include.me);
# includeGithubFolder ...
mean(x);
cat("\n", "===============", "\n\n");
doMean(x);
cat("\n", "===============", "\n\n");
sd(x);
cat("\n", "===============", "\n\n");
scale(x);
cat("\n", "===============", "\n\n");
as.numeric( scale(x) );
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-get-set.R");
source(include.me);
x.scale = scale(x);
getAttribute("scaled:center", x.scale); # mean
getAttribute("scaled:scale", x.scale); # sd
as.numeric( scale(x) );
cat("\n", "===============", "\n\n");
calculateZscores(x);
calculateZscores(x, x.bar=3, s.hat=1);  # we assume we have a known "true value" for the estimates x.bar and s.hat
x.cut = cutMe( x, c(1/2) );
table(x.cut$member);
x.cut;
x.cut = cutMe( x, c(1/3, 2/3) );
table(x.cut$member);
x.cut;
x.cut = cutMe( x, c(1/4, 2/4, 3/4) );
table(x.cut$member);
x.cut;
x.cut = cutMe( x, (1:4)/5 );
table(x.cut$member);
x.cut;
x.cut = cutMe( x, (1:7)/8 );
table(x.cut$member);
x.cut;
x.cut = cutMe( x, (1:9)/10 );
table(x.cut$member);
x.cut;
ncuts = 100;
x.cut = cutMe( x, (1:(ncuts-1))/ncuts );
table(x.cut$member);
x.cut;  # not enough data
source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-get-set.R");
source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-get-set.R");
# source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-get-set.R");
# source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-stats.R");
z = calculateZscores(x);
range.z = c(-3,3);
steps.z = 1/2;
z.cut = cutZ(z, range.z, steps.z, verbose=TRUE);
table(z.cut$member);
z.cut;
yRange = c(0,0.4);
fstr = "Normal: -4 , 4 ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE, ylim=yRange);
steps.z = 1/1;
z.cut = cutZ(z, range.z, steps.z, verbose=FALSE);
z.table = table(z.cut$member);
zCutOverlay(z.table, steps.z, ylim=yRange);
## normality
( isNormal = stats::shapiro.test(x) );
str(isNormal);
# source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-get-set.R");
# source("C:/_git_/github/MonteShaffer/humanVerse/humanVerse/R/functions-stats.R");
# set.seed(12222015);
set.seed(02232021);  # what would this accomplish ?
x = rnorm(100);
z = calculateZscores(x);
plot(x,z);
cor(x,z);
cat("\n", "===============", "\n\n");
# x == z;
range.z = c(-3,3);
steps.z = 1/4;
z.cut = cutZ(z, range.z, steps.z, verbose=TRUE);
table(z.cut$member);
z.cut;
yRange = c(0,0.4);
fstr = "Normal: -4 , 4  >  xlab=''; ylab=''; ";
finfo = computeNumericalIntegrationString(fstr, verbose=FALSE, ylim=yRange, polygon.col.pos = wsu.crimson);
steps.z = 1/6;
z.cut = cutZ(z, range.z, steps.z, verbose=FALSE);
z.table = table(z.cut$member);
zCutOverlay(z.table, steps.z, ylim=yRange, myColor= paste0(wsu.gray,"CC"));
## normality
( isNormal = stats::shapiro.test(x) );  # this goes to 5000 only ?
str(isNormal);
list("0.10" = isTRUE(isNormal$p.value > 0.10), "0.05" = isTRUE(isNormal$p.value > 0.05), "0.01" = isTRUE(isNormal$p.value > 0.01) );
which.github = "remote";  # local ... remote
github.local = "C:/_git_/github/RachelJudd/WSU_STATS419_Spring2021/";
github.remote = "https://raw.githubusercontent.com/RachelJudd/WSU_STATS419_Spring2021/main/";
if(which.github == "remote")
{
mypath = paste0(github.remote, "workspace/o-well/")
# include.me = paste0(github.remote,"https://raw.githubusercontent.com/RachelJudd/WSU_STATS419_Spring2021/main/functions/functions-intro.R");
#   library(devtools);
#   source_url(include.me);
} else {
mypath = paste0(github.local, "workspace/o-well/")
#           include.me = paste0( github.local, "functions/functions-intro.R");
#           library(devtools);
#           source(include.me);
}
path.data = paste0(mypath, "data/")
storeToPipe = function(df, file, header=TRUE, quote="", sep="|", row.names=FALSE)
{
if(quote == "") { quote = FALSE; }
utils::write.table(df, file=file, quote=quote, col.names=header, row.names=row.names, sep=sep);
}
readFromPipe = function(file, header=TRUE, quote="", sep="|")
{
utils::read.csv(file, header=header, quote=quote, sep=sep);
}
file = paste0(path.data, "saudi2.txt");
# readFromPipe(file, header=TRUE, quote="", sep="|");
saudi2 = data.frame(readFromPipe(file, header=TRUE, quote="", sep="|"))
#https://stackoverflow.com/questions/23163863/mean-of-a-column-in-a-data-frame-given-the-columns-name
summary(saudi2[["As"]]);
sd(saudi2[["As"]]);
boxplot(saudi2[["As"]]);
summary(saudi2[["B"]]);
sd(saudi2[["B"]]);
boxplot(saudi2[["B"]]);
summary(saudi2[["Ba"]]);
sd(saudi2[["Ba"]]);
boxplot(saudi2[["Ba"]]);
summary(saudi2[["Be"]]);
sd(saudi2[["Be"]]);
boxplot(saudi2[["Be"]]);
summary(saudi2[["Cd"]]);
sd(saudi2[["Cd"]]);
boxplot(saudi2[["Cd"]]);
summary(saudi2[["Co"]]);
sd(saudi2[["Co"]]);
boxplot(saudi2[["Co"]]);
summary(saudi2[["Cr"]]);
sd(saudi2[["Cr"]]);
boxplot(saudi2[["Cr"]]);
summary(saudi2[["Cu"]]);
sd(saudi2[["Cu"]]);
boxplot(saudi2[["Cu"]]);
summary(saudi2[["Fe"]]);
sd(saudi2[["Fe"]]);
boxplot(saudi2[["Fe"]]);
summary(saudi2[["Hg"]]);
sd(saudi2[["Hg"]]);
boxplot(saudi2[["Hg"]]);
summary(saudi2[["Mn"]]);
sd(saudi2[["Mn"]]);
boxplot(saudi2[["Mn"]]);
summary(saudi2[["Mo"]]);
sd(saudi2[["Mo"]]);
boxplot(saudi2[["Mo"]]);
summary(saudi2[["Pb"]]);
sd(saudi2[["Pb"]]);
boxplot(saudi2[["Pb"]]);
summary(saudi2[["Se"]]);
sd(saudi2[["Se"]]);
boxplot(saudi2[["Se"]]);
summary(saudi2[["Zn"]]);
sd(saudi2[["Zn"]]);
boxplot(saudi2[["Zn"]]);
summary(saudi2[["pH"]]);
sd(saudi2[["pH"]]);
boxplot(saudi2[["pH"]]);
summary(saudi2[["Eh"]]);
sd(saudi2[["Eh"]]);
boxplot(saudi2[["Eh"]]);
summary(saudi2[["TDS"]]);
sd(saudi2[["TDS"]]);
boxplot(saudi2[["TDS"]]);
summary(saudi2[["Ca"]]);
sd(saudi2[["Ca"]]);
boxplot(saudi2[["Ca"]]);
summary(saudi2[["K"]]);
sd(saudi2[["K"]]);
boxplot(saudi2[["K"]]);
summary(saudi2[["Mg"]]);
sd(saudi2[["Mg"]]);
boxplot(saudi2[["Mg"]]);
summary(saudi2[["Na"]]);
sd(saudi2[["Na"]]);
boxplot(saudi2[["Na"]]);
summary(saudi2[["HCO3"]]);
sd(saudi2[["HCO3"]]);
boxplot(saudi2[["HCO3"]]);
summary(saudi2[["Cl"]]);
sd(saudi2[["Cl"]]);
boxplot(saudi2[["Cl"]]);
summary(saudi2[["SO4"]]);
sd(saudi2[["SO4"]]);
boxplot(saudi2[["SO4"]]);
summary(saudi2[["NO3"]]);
sd(saudi2[["NO3"]]);
boxplot(saudi2[["NO3"]]);
summary(saudi2[["F"]]);
sd(saudi2[["F"]]);
boxplot(saudi2[["F"]]);
summary(saudi2[["PO4"]]);
sd(saudi2[["PO4"]]);
boxplot(saudi2[["PO4"]]);
summary(saudi2[["TH"]]);
sd(saudi2[["TH"]]);
boxplot(saudi2[["TH"]]);
summary(saudi2[["TA"]]);
sd(saudi2[["TA"]]);
boxplot(saudi2[["TA"]]);
summary(saudi2[["TS"]]);
sd(saudi2[["TS"]]);
boxplot(saudi2[["TS"]]);
summary(saudi2[["SS"]]);
sd(saudi2[["SS"]]);
boxplot(saudi2[["SS"]]);
summary(saudi2[["COD"]]);
sd(saudi2[["COD"]]);
boxplot(saudi2[["COD"]]);
summary(saudi2[["BOD"]]);
sd(saudi2[["BOD"]]);
boxplot(saudi2[["BOD"]]);
summary(saudi2[["DO"]]);
sd(saudi2[["DO"]]);
boxplot(saudi2[["DO"]]);
summary(saudi2[["Latitude"]]);
sd(saudi2[["Latitude"]]);
boxplot(saudi2[["Latitude"]]);
summary(saudi2[["Longitude"]]);
sd(saudi2[["Longitude"]]);
boxplot(saudi2[["Longitude"]]);
summary(saudi2[["Altitude"]]);
sd(saudi2[["Altitude"]]);
boxplot(saudi2[["Altitude"]]);
summary(saudi2[["Fault"]]);
sd(saudi2[["Fault"]]);
boxplot(saudi2[["Fault"]]);
# print(saudi2[["Geology"]]);
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v = c("sand,granite","sand,granite,alkaline","alkaline,conglomerate","alkaline","volcanic,granite","volcanic","gypsum","alkaline","gypsum","volcanic,conglomerate","alkaline,granite","granite,alkaline","gypsum","gypsum","volcanic","volcanic,granite,alkaline","gypsum,conglomerate","sand","sand","sand","sand","sand","alkaline,granite");
getmode(v);
cor(saudi2[["Altitude"]],saudi2[["pH"]]);
cor(saudi2[["Altitude"]],saudi2[["As"]])
cor(saudi2[["Altitude"]], saudi2[["B"]])
cor(saudi2[["Altitude"]],saudi2[["Ba"]])
cor(saudi2[["Altitude"]],saudi2[["Be"]])
cor(saudi2[["Altitude"]],saudi2[["Cd"]])
cor(saudi2[["Altitude"]],saudi2[["Co"]])
cor(saudi2[["Altitude"]],saudi2[["Cr"]])
cor(saudi2[["Altitude"]],saudi2[["Cu"]])
cor(saudi2[["Altitude"]],saudi2[["Fe"]])
cor(saudi2[["Altitude"]],saudi2[["Hg"]])
cor(saudi2[["Altitude"]],saudi2[["Mn"]])
cor(saudi2[["Altitude"]],saudi2[["Mo"]])
cor(saudi2[["Altitude"]],saudi2[["Pb"]])
cor(saudi2[["Altitude"]],saudi2[["Se"]])
cor(saudi2[["Altitude"]],saudi2[["Zn"]])
cor(saudi2[["Altitude"]],saudi2[["Eh"]])
cor(saudi2[["Altitude"]],saudi2[["TDS"]])
cor(saudi2[["Altitude"]],saudi2[["Ca"]])
cor(saudi2[["Altitude"]],saudi2[["K"]])
cor(saudi2[["Altitude"]],saudi2[["Mg"]])
cor(saudi2[["Altitude"]],saudi2[["Na"]])
cor(saudi2[["Altitude"]],saudi2[["HCO3"]])
cor(saudi2[["Altitude"]],saudi2[["Cl"]])
cor(saudi2[["Altitude"]],saudi2[["SO4"]])
cor(saudi2[["Altitude"]],saudi2[["NO3"]])
cor(saudi2[["Altitude"]],saudi2[["F"]])
cor(saudi2[["Altitude"]],saudi2[["PO4"]])
cor(saudi2[["Altitude"]],saudi2[["TH"]])
cor(saudi2[["Altitude"]],saudi2[["TA"]])
cor(saudi2[["Altitude"]],saudi2[["TS"]])
cor(saudi2[["Altitude"]],saudi2[["SS"]])
cor(saudi2[["Altitude"]],saudi2[["COD"]])
cor(saudi2[["Altitude"]],saudi2[["BOD"]])
cor(saudi2[["Altitude"]],saudi2[["DO"]])
cor(saudi2[["Altitude"]],saudi2[["Latitude"]])
cor(saudi2[["Altitude"]],saudi2[["Longitude"]])
cor(saudi2[["Altitude"]],saudi2[["Fault"]])
cor(saudi2[["Altitude"]],saudi2[["Distance.to.Water"]])
cor(saudi2[["Fault"]],saudi2[["pH"]])
cor(saudi2[["Latitude"]],saudi2[["pH"]])
cor(saudi2[["Latitude"]],saudi2[["pH"]])
cor(saudi2[["Longitude"]],saudi2[["pH"]])
