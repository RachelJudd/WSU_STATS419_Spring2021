github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerseWSU/master/misc/functions-midterm-F2000.R");  # # should be 2020 ... oh well ...
include.me;
#library(devtools);
#source_url(include.me);
source(include.me);
readFromPipe = function(file, header=TRUE, quote="", sep="|")
{
utils::read.csv(file, header=header, quote=quote, sep=sep);
}
path.mshaffer = "http://md5.mshaffer.com/WSU_STATS419/";
jobfile = paste0(path.mshaffer, "_data_/indeed-jobs.txt");
jobs = readFromPipe(jobfile);
colnames(jobs) = c("year.week", "search.query", "job.count");
jobs;
hist(jobs$job.count);
boxplot(jobs$job.count, horizontal=TRUE);
summary(jobs$job.count);
# https://raw.githubusercontent.com/MonteShaffer/humanVerse/main/humanVerse/R/functions-dataframe.R
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-dataframe.R");
#library(devtools);
#source_url(include.me);
source(include.me); # subsetDataFrame
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-str.R");
source(include.me); # trimMe
include.me = paste0(github.monte, "humanVerse/main/humanVerse/R/functions-vector.R");
source(include.me); # findAllIndexesWithValueInVector
deep.dive = c("Microsoft Office", "C++", "SQL", "Computer Science", "Python", "Java", "Statistics", "Data analysis", "Data analytics", "Javascript", "machine learning", "Git", "Tableau", "Business intelligence", "PHP", "Mysql", "MariaDB", "SAS", "SPSS", "Stata",  "Data entry", "Big data", "Data science", "Power BI");
jobs.subset = subsetDataFrame(jobs, "search.query", "==", deep.dive, logic="OR", verbose=TRUE);
hist(jobs.subset$job.count);
boxplot(jobs.subset$job.count, horizontal=TRUE);
summary(jobs.subset$job.count);
jobs.subset$year = jobs.subset$week = NA;
tmp = strsplit(jobs.subset$year.week, "-", fixed=TRUE);
for(i in 1:length(tmp))
{
row = as.numeric(tmp[[i]]);
jobs.subset$year[i] = row[1];
jobs.subset$week[i] = row[2];
}
str(jobs.subset);
jobs.subset;
# function requires this format ... update?
# jobs.subset$year.week = as.numeric( gsub("-",".",jobs.subset$year.week, fixed=TRUE) );
jobs.subset$year.week = jobs.subset$week;
jobs.subset = sortDataFrameByNumericColumns(jobs.subset, c("year.week","job.count"), c("ASC","DESC") );
jobs.subset$job.count.k = jobs.subset$job.count / 1000; # easier to think about "1000s" of jobs ...
do.nothing = plotJobs(jobs.subset);
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,42) );
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,20) );
idxs.week.40 = which(jobs.subset$week == 40);
idxs.Git     = which(jobs.subset$search.query == "Git");
# set notation
my.idx = intersect(idxs.Git,idxs.week.40);
jobs.subset[idxs.Git,];
jobs.subset[my.idx,];
myNewValue = mean( jobs.subset[ idxs.Git[-c(which(idxs.Git == my.idx))]    ,]$job.count, na.rm=TRUE);
myNewValue;   # mean vs doMean
# interpolation of sorts
#########################
# serious interpolation
library(PolynomF);
interpolatePolynomial = function(x, xs, ys)
{
polynomial = as.function( poly_calc(xs, ys) );
y = polynomial(x);
y;
}
xs = 38:42;
ys = jobs.subset[idxs.Git,]$job.count;
# the 3rd element is missing
myNewValue2 = interpolatePolynomial(40, xs[-c(3)], ys[-c(3)]);
myNewValue2;
#########################
whichValue = myNewValue2;  # myNewValue;  # you CHOOSE
#####
## change this if you feel appropriate?  To what number?
jobs.subset[my.idx,]$job.count = whichValue;         # job.count
jobs.subset[my.idx,]$job.count.k = whichValue/1000;    # job.count.k (in thousands) ...
jobs.subset[idxs.Git,];
# CNTRL-SHIFT ENTER RUNS THE CURRENTLY HIGHLIGHTED CHUNK
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,20) );
do.nothing = plotJobs(jobs.subset, myy.lim = c(14,17) );
boxplotJobQueryComparison(jobs.subset, "Data science", "Big data");
path.mshaffer = "http://md5.mshaffer.com/WSU_STATS419/";
cityfile = paste0(path.mshaffer, "_data_/state-capitals/final/state-capitals.txt");
capitals = readFromPipe(cityfile);
colnames(capitals) = c("state", "capital", "latitude", "longitude", "capital.since", "area.sq.miles", "population.2019.est", "population.2019.est.MSA", "population.2019.est.CSA", "city.rank.in.state", "url");
capitals$st = c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"); # ,"DC","AS","GU","MP","PR","UM","VI");
myLabels = paste0(capitals$capital, ", ", capitals$st);
capitals;
latlong = removeAllColumnsBut(capitals,c( "state", "st", "capital", "latitude", "longitude", "population.2019.est") );
# first two elements have to be this
latlong = moveColumnsInDataFrame(latlong, c("longitude","latitude"), "before", "state");
# for transform to work
library(usmap);
latlong.transform = usmap_transform(latlong);
library(ggplot2);
### plot_usmap ...
plot_usmap(fill = "#53565A", alpha = 0.25) +
ggrepel::geom_label_repel(data = latlong.transform,
aes(x = longitude.1, y = latitude.1, label = capital),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "#981E32", segment.size = 1,
seed = 1002) +
scale_size_continuous(range = c(1, 16),
label = scales::comma) +
labs(title = "U.S. State Capitals",
subtitle = "Source: Wikipedia (October 2020)") +
theme(legend.position = "right")
colors = rainbow(50, s = 0.6, v = 0.75);
## initial visualization ...
library(tripack);
# plot( voronoi.mosaic(latlong[,4:3], duplicate="remove"), col=colors, xlab="");
plot( voronoi.mosaic(x = latlong$longitude, y = latlong$latitude), col=colors, xlab="");
text(x = latlong$longitude, y = latlong$latitude, labels = latlong$capital, col=colors, cex=0.5);
### how is any of the other visualizations really any better than a simple map ... with actual locations for Alaska/Hawaii?
library(maps);
map('state', plot = TRUE, fill = FALSE,
col = "blue", myborder = 0.5
);
points(x = latlong$longitude, y = latlong$latitude,
col = "red", pch = "*", cex = 1);
path.mshaffer = "http://md5.mshaffer.com/WSU_STATS419/";
climatefile = paste0(path.mshaffer, "_data_/state-capitals/final/state-capitals-climatedata.txt");
climate = readFromPipe(climatefile);
plotTemperatureFromWikipediaData(climate, city.key="capital", city.val="Helena");
# TODO: update from "old-school" to ImageMagick to load images ...
plotTemperatureFromWikipediaData(climate, city.key="capital", city.val="Baton Rouge");
plotTemperatureFromWikipediaData(climate, city.key="capital", city.val="Olympia");
compareTwoCitiesClimates(climate, city.key="capital", city.1="Helena", city.2="Baton Rouge");
deep.dive = c("Microsoft Office", "C++", "SQL", "Computer Science", "Python", "Java", "Statistics", "Data analysis", "Data analytics", "Javascript", "machine learning", "Git", "Tableau", "Business intelligence", "PHP", "Mysql", "MariaDB", "SAS", "SPSS", "Stata",  "Data entry", "Big data", "R", "Data science", "Power BI");
jobs.subset = subsetDataFrame(jobs, "search.query", "==", deep.dive, logic="OR", verbose=TRUE);
hist(jobs.subset$job.count);
boxplot(jobs.subset$job.count, horizontal=TRUE);
summary(jobs.subset$job.count);
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
include.me = paste0(github.monte, "humanVerseWSU/master/misc/functions-midterm-F2000.R");  # # should be 2020 ... oh well ...
include.me;
do.nothing = plotJobs(jobs.subset);
do.nothing = plotJobs(jobs.subset);
# function requires this format ... update?
# jobs.subset$year.week = as.numeric( gsub("-",".",jobs.subset$year.week, fixed=TRUE) );
jobs.subset$year.week = jobs.subset$week;
jobs.subset = sortDataFrameByNumericColumns(jobs.subset, c("year.week","job.count"), c("ASC","DESC") );
hist(jobs.subset$job.count);
boxplot(jobs.subset$job.count, horizontal=TRUE);
summary(jobs.subset$job.count);
jobs.subset$year = jobs.subset$week = NA;
tmp = strsplit(jobs.subset$year.week, "-", fixed=TRUE);
deep.dive = c("Microsoft Office", "C++", "SQL", "Computer Science", "Python", "Java", "Statistics", "Data analysis", "Data analytics", "Javascript", "machine learning", "Git", "Tableau", "Business intelligence", "PHP", "Mysql", "MariaDB", "SAS", "SPSS", "Stata",  "Data entry", "Big data", "R", "Data science", "Power BI");
# "R" to include or not
jobs.subset = subsetDataFrame(jobs, "search.query", "==", deep.dive, logic="OR", verbose=TRUE);
str(jobs.subset);
hist(jobs.subset$job.count);
boxplot(jobs.subset$job.count, horizontal=TRUE);
summary(jobs.subset$job.count);
jobs.subset$year = jobs.subset$week = NA;
tmp = strsplit(jobs.subset$year.week, "-", fixed=TRUE);
for(i in 1:length(tmp))
{
row = as.numeric(tmp[[i]]);
jobs.subset$year[i] = row[1];
jobs.subset$week[i] = row[2];
}
str(jobs.subset);
jobs.subset;
str(jobs.subset)
# function requires this format ... update?
# jobs.subset$year.week = as.numeric( gsub("-",".",jobs.subset$year.week, fixed=TRUE) );
jobs.subset$year.week = jobs.subset$week;
jobs.subset = sortDataFrameByNumericColumns(jobs.subset, c("year.week","job.count"), c("ASC","DESC") );
jobs.subset$job.count.k = jobs.subset$job.count / 1000; # easier to think about "1000s" of jobs ...
str(jobs.subset)
do.nothing = plotJobs(jobs.subset);
do.nothing = plotJobs(jobs.subset);
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,42) );
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,20) );
idxs.week.40 = which(jobs.subset$week == 40);
idxs.Git     = which(jobs.subset$search.query == "Git");
# set notation
my.idx = intersect(idxs.Git,idxs.week.40);
jobs.subset[idxs.Git,];
jobs.subset[my.idx,];
idxs.week.40 = which(jobs.subset$week == 40);
idxs.Git     = which(jobs.subset$search.query == "Git");
# set notation
my.idx = intersect(idxs.Git,idxs.week.40);
jobs.subset[idxs.Git,];
jobs.subset[my.idx,];
myNewValue = mean( jobs.subset[ idxs.Git[-c(which(idxs.Git == my.idx))]    ,]$job.count, na.rm=TRUE);
myNewValue;   # mean vs doMean
# interpolation of sorts
#########################
# serious interpolation
library(PolynomF);
interpolatePolynomial = function(x, xs, ys)
{
polynomial = as.function( poly_calc(xs, ys) );
y = polynomial(x);
y;
}
xs = 38:42;
ys = jobs.subset[idxs.Git,]$job.count;
# the 3rd element is missing
myNewValue2 = interpolatePolynomial(40, xs[-c(3)], ys[-c(3)]);
myNewValue2;
idxs.week.40 = which(jobs.subset$week == 40);
idxs.Git     = which(jobs.subset$search.query == "Git");
# set notation
my.idx = intersect(idxs.Git,idxs.week.40);
jobs.subset[idxs.Git,];
jobs.subset[my.idx,];
myNewValue = mean( jobs.subset[ idxs.Git[-c(which(idxs.Git == my.idx))]    ,]$job.count, na.rm=TRUE);
myNewValue;   # mean vs doMean
# interpolation of sorts
#########################
# serious interpolation
library(PolynomF);
interpolatePolynomial = function(x, xs, ys)
{
polynomial = as.function( poly_calc(xs, ys) );
y = polynomial(x);
y;
}
xs = 38:42;
ys = jobs.subset[idxs.Git,]$job.count;
# the 3rd element is missing
myNewValue2 = interpolatePolynomial(40, xs[-c(3)], ys[-c(3)]);
myNewValue2;
#########################
whichValue = myNewValue2;  # myNewValue;  # you CHOOSE
#####
## change this if you feel appropriate?  To what number?
jobs.subset[my.idx,]$job.count = round(whichValue);         # job.count
jobs.subset[my.idx,]$job.count.k = whichValue/1000;    # job.count.k (in thousands) ...
jobs.subset[idxs.Git,];
# CNTRL-SHIFT ENTER RUNS THE CURRENTLY HIGHLIGHTED CHUNK
do.nothing = plotJobs(jobs.subset, myy.lim = c(0,20) );
do.nothing = plotJobs(jobs.subset, myy.lim = c(14,17) );
boxplotJobQueryComparison(jobs.subset, "Data science", "Big data");
t.test.jobs(jobs.subset, "Data science", "Big data");
path.mshaffer = "http://md5.mshaffer.com/WSU_STATS419/";
cityfile = paste0(path.mshaffer, "_data_/state-capitals/final/state-capitals.txt");
capitals = readFromPipe(cityfile);
colnames(capitals) = c("state", "capital", "latitude", "longitude", "capital.since", "area.sq.miles", "population.2019.est", "population.2019.est.MSA", "population.2019.est.CSA", "city.rank.in.state", "url");
capitals$st = c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"); # ,"DC","AS","GU","MP","PR","UM","VI");
myLabels = paste0(capitals$capital, ", ", capitals$st);
capitals;
latlong = removeAllColumnsBut(capitals,c( "state", "st", "capital", "latitude", "longitude", "population.2019.est") );
# first two elements have to be this
latlong = moveColumnsInDataFrame(latlong, c("longitude","latitude"), "before", "state");
# for transform to work
library(usmap);
latlong.transform = usmap_transform(latlong);
library(ggplot2);
### plot_usmap ...
plot_usmap(fill = "#53565A", alpha = 0.25) +
ggrepel::geom_label_repel(data = latlong.transform,
aes(x = longitude.1, y = latitude.1, label = capital),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "#981E32", segment.size = 1,
seed = 1002) +
scale_size_continuous(range = c(1, 16),
label = scales::comma) +
labs(title = "U.S. State Capitals",
subtitle = "Source: Wikipedia (October 2020)") +
theme(legend.position = "right")
colors = rainbow(50, s = 0.6, v = 0.75);
## initial visualization ...
library(tripack);
# plot( voronoi.mosaic(latlong[,4:3], duplicate="remove"), col=colors, xlab="");
plot( voronoi.mosaic(x = latlong$longitude, y = latlong$latitude), col=colors, xlab="");
text(x = latlong$longitude, y = latlong$latitude, labels = latlong$capital, col=colors, cex=0.5);
### how is any of the other visualizations really any better than a simple map ... with actual locations for Alaska/Hawaii?
library(maps);
map('state', plot = TRUE, fill = FALSE,
col = "blue", myborder = 0.5
);
points(x = latlong$longitude, y = latlong$latitude,
col = "red", pch = "*", cex = 1);
path.mshaffer = "http://md5.mshaffer.com/WSU_STATS419/";
climatefile = paste0(path.mshaffer, "_data_/state-capitals/final/state-capitals-climatedata.txt");
climate = readFromPipe(climatefile);
plotTemperatureFromWikipediaData(climate, city.key="capital", city.val="Helena");
# TODO: update from "old-school" to ImageMagick to load images ...
unique(jobs$search.query)
sort(unique(jobs$search.query))
