# git add .
# git status
# git commit -m "first commit"
# git push -u origin HEAD:main
10-7;
10-3;
7-3;
3-0;
xs = c(2,3,5,7,11,13,17,19,23);
n = 0;
sum = 0;
for(x in xs)
{
n = 1 + n;
sum = x + sum;
}
mean = sum/n;
n;
sum;
mean;
xs = c(2,3,5,7,11,13,17,19,23);
n = 0;
sum = 0;
for(x in xs)
{
n = 1 + n;
sum = x + sum;
}
mean = sum/n;
sum2 = 0;  # sums squared
for(x in xs)
{
deviation = x - mean;
deviation2 = deviation*deviation;
sum2 = sum2 + deviation2;
}
s.var = sum2/(n - 1);
s.sd  = sqrt(s.var);
n;
sum;
mean;
sum2;
s.var;
s.sd;
xs = c(2,3,5,7,11,13,17,19,23);
n = 0;
sum = 0;
sum2 = 0;
for(x in xs)
{
n = 1 + n;
sum = x + sum;
x2 = x*x;
sum2 = sum2 + x2;
}
mean = sum/n;
s.var = (sum2 - (sum * sum)/n)/(n - 1);
s.sd  = sqrt(s.var);
n;
sum;
mean;
sum2;
s.var;
s.sd;
xs = c(2,3,5,7,11,13,17,19,23);
xbar = sum(xs)/length(xs);
xbar;
svar = (sum((xs - xbar)^2 )) / (length(xs) - 1);
svar;
sd = sqrt(svar);
sd;
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
library(devtools);  # need to get rid of this dependency ...
source_url( paste0(  github.monte, "humanVerse/main/misc/functions-sort.R" ) );
# https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/humanVerseWSU/R/functions-sort.R
# randomize order every time
# set.seed(1234);  # set.seed(NULL);
xs = sample( c(2,3,5,7,11,13,17,19,23) );
xs;
sortMe.insertion(xs);
# randomize order every time
xs = sample( c(2,3,5,7,11,13,17,19,23) );
xs;
sortMe.selection(xs);
# randomize order every time
xs = sample( c(2,3,5,7,11,13,17,19,23) );
xs;
sortMe.bubble(xs);
result = NULL;
# 10^c(1:3) only takes less than 30 seconds to run
# 10^4 takes a long time
lengths = 10^c( seq(1,3.1415926535897932384626,by=0.1) );
for(len in lengths)
{
len = round(len, 0);
print(len);
x = rnorm( len ); # generate data
d = sortMe.base(x,verbose=FALSE,timings=TRUE); # built-in default
i = sortMe.insertion(x,verbose=FALSE,timings=TRUE);
s = sortMe.selection(x,verbose=FALSE,timings=TRUE);
b = sortMe.bubble(x,verbose=FALSE,timings=TRUE);
row = c(len,d$time,i$time,s$time,b$time);
result = rbind(result,row);
}
result = as.data.frame(result);
colnames(result) = c("n","sort","insertion","selection","bubble");
result;
xlim = range(result$n);
ylim = range(result[,2:5]);
for(j in 2:5)
{
if(j > 2)
{
par(new=TRUE);
plot(result$n, result[,j], type="l", xlab="", ylab="", col=palette()[j], xlim=xlim, ylim=ylim, lwd=2, bty="n");
} else
{
plot(result$n, result[,j], type="l", xlab="numbers to sort", ylab="time in seconds", col=palette()[j], xlim=xlim, ylim=ylim, lwd=2, bty="n");
}
}
legend("topleft", legend=names(result[,2:5]), col=palette()[2:5], bty="n", lwd=2);
summary(xs);
xs = sort( sample( c(2,3,5,7,11,13,17,19,23) ) );
n = length(xs);
idx.min = 1; # first element is the min
print(paste0( "idx.min: ",idx.min," --> min: ",xs[idx.min]));
idx.max = n; # last element is the max
print(paste0( "idx.max: ",idx.max," --> max: ",xs[idx.max]));
idx.median = n * 1/2;
idx.Q1     = n * 1/4;
idx.Q3     = n * 3/4;
# if the "idx" doesn't land on an exact number, what should we do?
# we could "average" using the mean, but the result is a number not in our dataset.  There are lot's of ways to choose these values.
# most textbooks say "average" the middle two numbers; such a result is a number not actually in the dataset...
# default in #7
# I prefer #1
for(i in 1:9)
{
print(paste0("type: ",i));
print( quantile(xs,probs=c(1/4,1/2,3/4),type=i) );
}
Qs = as.numeric( quantile(xs, probs=c(1/4,1/2,3/4), type=1) );
Q1=Qs[1];
Q2=Qs[2];
Q3=Qs[3];
print(paste0("Q1: ", Q1 ));
print(paste0("Q2 (median): ", Q2 ));
print(paste0("Q3: ", Q3 ));
IQR = Q3 = Q1;
print(paste0("IQR (inter-quartile range): ", IQR ));
##############################################
mean(xs);
sd(xs); # traditional "deviation" measure anchored to mean
github.monte = "https://raw.githubusercontent.com/MonteShaffer/";
library(devtools);  # need to get rid of this dependency ...
source_url( paste0(  github.monte, "humanVerse/main/humanVerse/R/functions-vector.R" ) );
source_url( paste0(  github.monte, "humanVerse/main/humanVerse/R/functions-str.R" ) );
source_url( paste0(  github.monte, "humanVerse/main/humanVerse/R/functions-stats.R" ) );
# https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/humanVerseWSU/R/functions-vector.R
# https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/humanVerseWSU/R/functions-str.R
# https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/humanVerseWSU/R/functions-stats.R
max(presidents[1:30]);
max(presidents[1:30], na.rm=TRUE);
# presidents is a built-in data set
which.max( c(87, presidents[1:30], 87) );
# my function
whichMax( c(87, presidents[1:30], 87) );
which( c(87, presidents[1:30], 87) == max(presidents[1:30], na.rm=TRUE) );
min(presidents[1:30]);
min(presidents[1:30], na.rm=TRUE);
# presidents is a built-in data set
which.min( c(87, presidents[1:30], 87) );
# my function
whichMin( c(87, presidents[1:30], 87) );
which( c(87, presidents[1:30], 87) == min(presidents[1:30], na.rm=TRUE) );
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
getmode(v);
charv <- c("o","it","the","it","it")
getmode(charv)
charv <- c("the", "o","it","the","it","it","the")
getmode(charv)
# my function
doMode( c(1, 1:9, 9) );
doMode(charv)
xs = c(2,3,5,7,11,13,17,19,23);
median(xs); # built-in function
doMedian(xs); # my function
# pracma::primes(333);
xs = c(2,3,5,7,11,13,17,19,23,29);
median(xs);
doMedian(xs); # my function
xs = c(2,3,5,7,11,13,17,19,23);
mean(xs); # built-in function
doMean(xs); # my function ... computes "theoretical mean" and finds the closest number to it in the "actual data"
# pracma::primes(333);
xs = c(2,3,5,7,11,13,17,19,23,29);
mean(xs);
doMean(xs); # my function
# latitude.mean = ???
# longitude.mean = ???
#
# latitude.median = ???
# longitude.median = ???
